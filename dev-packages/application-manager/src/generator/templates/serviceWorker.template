const getManifest = async function(){
    const resp = await fetch('pwa.manifest.json');
    const manifest = await resp.json();
    const files = Object.values(manifest);
    return files;
}

const cacheName = 'cache-devpod';
self.addEventListener('install', (event) => {
    console.info('Event: Install');
    event.waitUntil(
    caches.open(cacheName)
    .then((cache) => {
        getManifest().then(function(files){
            console.info('Files to cache',files);
            files.map(function(url){
                return cache.add(url).catch(function (reason) {
                    return console.log('pwa: ' + String(reason) + ' ' + url);
                });
            })
        })
    })
    );
});

self.addEventListener('fetch', (e) => {
    console.info('Event: Fetch');
    if ( ! e.request.url.match(/^(http|https):\/\//i) )
        return;
    if ( new URL(e.request.url).origin !== location.origin )
		return;
    if ( e.request.mode === 'navigate' && navigator.onLine ) {
        e.respondWith(
            fetch(e.request).then(function(response) {
                return caches.open(cacheName).then(function(cache) {
                    cache.put(e.request, response.clone());
                    return response;
                });
            })
        );
        return;
    }
    e.respondWith(
		caches.match(e.request).then(function(response) {
			return response || fetch(e.request).then(function(response) {
				return caches.open(cacheName).then(function(cache) {
					cache.put(e.request, response.clone());
					return response;
				});
			});
		}).catch(function(err) {
			console.error('no cache', err)
		})
	);
});

self.addEventListener('activate', function(e) {
	console.info('service worker activation');
	e.waitUntil(
		caches.keys().then(function(keyList) {
			return Promise.all(keyList.map(function(key) {
				if ( key !== cacheName ) {
					console.log('old cache removed', key);
					return caches.delete(key);
				}
			}));
		})
	);
	return self.clients.claim();
});
